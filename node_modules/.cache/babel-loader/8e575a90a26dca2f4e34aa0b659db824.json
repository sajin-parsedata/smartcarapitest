{"ast":null,"code":"var _slicedToArray = function () {\n  function sliceIterator(arr, i) {\n    var _arr = [];\n    var _n = true;\n    var _d = false;\n    var _e = undefined;\n\n    try {\n      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n        _arr.push(_s.value);\n\n        if (i && _arr.length === i) break;\n      }\n    } catch (err) {\n      _d = true;\n      _e = err;\n    } finally {\n      try {\n        if (!_n && _i[\"return\"]) _i[\"return\"]();\n      } finally {\n        if (_d) throw _e;\n      }\n    }\n\n    return _arr;\n  }\n\n  return function (arr, i) {\n    if (Array.isArray(arr)) {\n      return arr;\n    } else if (Symbol.iterator in Object(arr)) {\n      return sliceIterator(arr, i);\n    } else {\n      throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n    }\n  };\n}();\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) {\n  return typeof obj;\n} : function (obj) {\n  return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n};\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nfunction _toConsumableArray(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n\n    return arr2;\n  } else {\n    return Array.from(arr);\n  }\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\n;\n\n(function (root, factory) {\n  /* istanbul ignore next */\n  if (typeof define === 'function' && define.amd) {\n    define([], factory);\n  } else if ((typeof exports === 'undefined' ? 'undefined' : _typeof(exports)) === 'object') {\n    module.exports = factory();\n  } else {\n    root.Smartcar = factory();\n  }\n})(this, function () {\n  'use strict';\n  /* eslint-env node */\n\n  var Smartcar = function () {\n    /**\n     * @callback OnComplete\n     * @param {?Error} error - something went wrong in Connect; this\n     * normally indicates that the user denied access to your application or does not\n     * have a connected vehicle\n     * @param {String} code - the authorization code to be exchanged from a\n     * backend sever for an access token\n     * @param {Object} [state] - contains state if it was set on the initial\n     * authorization request\n     */\n\n    /**\n     * Initializes Smartcar class.\n     *\n     * @constructor\n     * @param {Object} options - the SDK configuration object\n     * @param {String} options.clientId - the application's client id\n     * @param {String} options.redirectUri - the registered redirect uri of the\n     * application\n     * @param {String[]} [options.scope] - requested permission scopes\n     * @param {OnComplete} [options.onComplete] - called on completion of Smartcar Connect\n     * @param {Boolean} [options.testMode=false] - launch Smartcar Connect in test mode\n     */\n    function Smartcar(options) {\n      var _this = this;\n\n      _classCallCheck(this, Smartcar); // polyfill String.prototype.startsWith for IE11 support\n      // istanbul ignore next\n\n\n      if (!String.prototype.startsWith) {\n        // eslint-disable-next-line no-extend-native\n        String.prototype.startsWith = function (searchString, position) {\n          position = position || 0;\n          return this.substr(position, searchString.length) === searchString;\n        };\n      } // ensure options are well formed\n\n\n      Smartcar._validateConstructorOptions(options);\n\n      this.clientId = options.clientId;\n      this.redirectUri = options.redirectUri;\n      this.scope = options.scope;\n      this.onComplete = options.onComplete;\n      this.mode = options.testMode === true ? 'test' : 'live';\n      this.responseType = 'code'; // identifier for matching message event and multiple Smartcar instances\n      // it is a string composed of a timestamp and a 8-digit random number\n\n      this.instanceId = new Date().getTime() + String(Math.random()).slice(2, 10); // handler\n\n      this.messageHandler = function (event) {\n        // bail if message from unexpected source\n        if (!_this.redirectUri.startsWith(event.origin)) {\n          return;\n        }\n\n        var message = event.data || {}; // bail if `message.name` is not `SmartcarAuthMessage`\n        // this prevents attempting to handle messages intended for others\n\n        if (message.name !== 'SmartcarAuthMessage') {\n          return;\n        } // bail if `state` is invalid\n\n\n        var stateObject = void 0;\n\n        try {\n          stateObject = JSON.parse(window.atob(message.state));\n        } catch (e) {\n          return;\n        }\n\n        var _stateObject = stateObject,\n            originalState = _stateObject.originalState,\n            instanceId = _stateObject.instanceId; // bail if `instanceId` doesn't match\n\n        if (instanceId !== _this.instanceId) {\n          return;\n        } // if onComplete not specified do nothing, assume developer is conveying\n        // completion information from backend server receiving redirect to front\n        // end (not using onComplete)\n\n\n        if (_this.onComplete) {\n          // if auth errored generate appropriate error else null\n          var generateError = function generateError(error, description) {\n            if (!error) {\n              return null;\n            }\n\n            switch (error) {\n              case 'access_denied':\n                return new Smartcar.AccessDenied(description);\n\n              case 'invalid_subscription':\n                return new Smartcar.InvalidSubscription(description);\n\n              case 'vehicle_incompatible':\n                var params = event.data; // This field will always exist if vehicleInfo is returned\n\n                if (!params.vin) {\n                  return new Smartcar.VehicleIncompatible(description, null);\n                } // These fields are required when vehicleInfo is returned\n\n\n                var vehicleInfo = {\n                  vin: params.vin,\n                  make: params.make,\n                  year: Number(params.year)\n                }; // This field is optional\n\n                if (params.model) {\n                  vehicleInfo.model = params.model;\n                }\n\n                return new Smartcar.VehicleIncompatible(description, vehicleInfo);\n\n              default:\n                return new Error('Unexpected error: ' + error + ' - ' + description);\n            }\n          };\n\n          var err = generateError(message.error, message.errorDescription);\n          /**\n           * Call `onComplete` with parameters even if developer is not using\n           * a Smartcar-hosted redirect. Regardless of if they are using a\n           * Smartcar-hosted redirect they may still want `onComplete` to do\n           * something with message.\n           *\n           * If empty onComplete is passed, parameters will be harmlessly ignored.\n           *\n           * If a developer chooses to pass an `onComplete` expecting these\n           * parameters they must also handle populating the corresponding query\n           * parameters in their redirect uri.\n           */\n\n          _this.onComplete(err, message.code, originalState);\n        }\n      }; // add handler for postMessage event on completion of Smartcar Connect\n\n\n      window.addEventListener('message', this.messageHandler);\n    }\n    /**\n     * Validate options passed to Smartcar constructor.\n     *\n     * See constructor documentation for enumeration of options properties.\n     *\n     * @private\n     * @param {Object} options - the SDK configuration object\n     */\n\n\n    _createClass(Smartcar, [{\n      key: 'getAuthUrl',\n\n      /**\n       * Generates Smartcar OAuth URL.\n       *\n       * @param {Object} options - the link configuration object\n       * @param {String} [options.state] - arbitrary state passed to redirect uri\n       * @param {Boolean} [options.forcePrompt=false] - force permission approval\n       * screen to show on every authentication, even if the user has previously\n       * consented to the exact scope of permission\n       * @param {String} [options.vehicleInfo.make] - `vehicleInfo` is an\n       * object with an optional property `make`, which allows users to bypass the\n       * car brand selection screen. For a complete list of supported brands, please\n       * see our [API Reference](https://smartcar.com/docs/api#authorization)\n       * documentation.\n       * @param {Boolean|Object} [options.singleSelect] - An optional value that sets the\n       * behavior of the grant dialog displayed to the user. If set to `true`,\n       * `single_select` limits the user to selecting only one vehicle. If `single_select`\n       * is passed in as an object with the property `vin`, Smartcar will only authorize\n       * the vehicle with the specified VIN. See the\n       * [API reference](https://smartcar.com/docs/api/#connect-match)\n       * for more information.\n       * @param {String[]} [options.flags] - An optional space-separated list of feature\n       * flags that your application has early access to.\n       *\n       * @return {String} Connect URL to redirect user to.\n       *\n       * @example\n       * https://connect.smartcar.com/oauth/authorize?\n       * response_type=code\n       * &client_id=8229df9f-91a0-4ff0-a1ae-a1f38ee24d07\n       * &scope=read_odometer read_vehicle_info\n       * &redirect_uri=https://example.com/home\n       * &state=0facda3319\n       * &make=TESLA\n       * &single_select=true\n       * &single_select_vin=5YJSA1E14FF101307\n       * &flags=country:DE color:00819D\n       */\n      value: function getAuthUrl(options) {\n        options = options || {};\n        var link = '';\n        link += 'https://connect.smartcar.com/oauth/authorize';\n        link += '?response_type=' + this.responseType;\n        link += '&client_id=' + this.clientId;\n        link += '&redirect_uri=' + encodeURIComponent(this.redirectUri); // map forcePrompt to approvalPrompt, two options: 'force' and 'auto'\n\n        var forcePrompt = options.forcePrompt === true;\n        link += '&approval_prompt=' + (forcePrompt ? 'force' : 'auto'); // If scope is not specified, Smartcar will default to requesting all scopes\n        // from the user\n\n        if (this.scope) {\n          link += '&scope=' + encodeURIComponent(this.scope.join(' '));\n        }\n\n        link += '&mode=' + this.mode;\n\n        if (options.singleSelect !== undefined && options.singleSelect !== null) {\n          var singleSelectParamAdded = false;\n\n          if (_typeof(options.singleSelect) === 'object') {\n            var availableParams = ['vin'];\n            var _iteratorNormalCompletion = true;\n            var _didIteratorError = false;\n            var _iteratorError = undefined;\n\n            try {\n              for (var _iterator = availableParams[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n                var param = _step.value;\n\n                if (param in options.singleSelect) {\n                  link += '&single_select_' + param + '=' + options.singleSelect[param];\n                  singleSelectParamAdded = true;\n                }\n              }\n            } catch (err) {\n              _didIteratorError = true;\n              _iteratorError = err;\n            } finally {\n              try {\n                if (!_iteratorNormalCompletion && _iterator.return) {\n                  _iterator.return();\n                }\n              } finally {\n                if (_didIteratorError) {\n                  throw _iteratorError;\n                }\n              }\n            }\n\n            if (!singleSelectParamAdded) {\n              link += '&single_select=false';\n            } else {\n              link += '&single_select=true';\n            }\n          } else {\n            link += '&single_select=' + (options.singleSelect === true);\n          }\n        } // augment state to track the corresponding instance\n\n\n        var state = {\n          instanceId: this.instanceId\n        };\n\n        if (options.state) {\n          state.originalState = options.state;\n        } // convert the augmented state to a base64 string\n\n\n        link += '&state=' + window.btoa(JSON.stringify(state));\n\n        if (options.vehicleInfo) {\n          var _availableParams = ['make'];\n          var _iteratorNormalCompletion2 = true;\n          var _didIteratorError2 = false;\n          var _iteratorError2 = undefined;\n\n          try {\n            for (var _iterator2 = _availableParams[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n              var _param = _step2.value;\n\n              if (_param in options.vehicleInfo) {\n                link += '&' + _param + '=' + encodeURIComponent(options.vehicleInfo[_param]);\n              }\n            }\n          } catch (err) {\n            _didIteratorError2 = true;\n            _iteratorError2 = err;\n          } finally {\n            try {\n              if (!_iteratorNormalCompletion2 && _iterator2.return) {\n                _iterator2.return();\n              }\n            } finally {\n              if (_didIteratorError2) {\n                throw _iteratorError2;\n              }\n            }\n          }\n        }\n\n        if (options.flags) {\n          link += '&flags=' + encodeURIComponent(options.flags.join(' '));\n        }\n\n        return link;\n      }\n      /**\n       * Launches Smartcar Connect in a new window.\n       *\n       * @param {Object} options - the link configuration object\n       * @param {String} [options.state] - arbitrary state passed to redirect uri\n       * @param {Boolean} [options.forcePrompt=false] - force permission approval\n       * screen to show on every authentication, even if the user has previously\n       * consented to the exact scope of permission\n       * @param {String} [options.vehicleInfo.make] - `vehicleInfo` is an\n       * object with an optional property `make`, which allows users to bypass the\n       * car brand selection screen. For a complete list of supported makes, please\n       * see our [API Reference](https://smartcar.com/docs/api#authorization)\n       * documentation.\n       * @param {Boolean|Object} [options.singleSelect] - An optional value that sets the\n       * behavior of the grant dialog displayed to the user. If set to `true`,\n       * `single_select` limits the user to selecting only one vehicle. If `single_select`\n       * is passed in as an object with the property `vin`, Smartcar will only authorize\n       * the vehicle with the specified VIN. See the\n       * [API reference](https://smartcar.com/docs/api/#connect-match)\n       * for more information.\n       * @param {Object} [options.windowOptions] - the position and dimension settings\n       * of the popup window\n       * @param {String} [options.windowOptions.top] - the top property of\n       * [window features](https://developer.mozilla.org/en-US/docs/Web/API/Window/open#Window_features)\n       * @param {String} [options.windowOptions.left] - the left property of\n       * [window features](https://developer.mozilla.org/en-US/docs/Web/API/Window/open#Window_features)\n       * @param {String} [options.windowOptions.width] - the width property of\n       * [window features](https://developer.mozilla.org/en-US/docs/Web/API/Window/open#Window_features)\n       * @param {String} [options.windowOptions.height] - the height property of\n       * [window features](https://developer.mozilla.org/en-US/docs/Web/API/Window/open#Window_features)\n       */\n\n    }, {\n      key: 'openDialog',\n      value: function openDialog(options) {\n        var windowOptions = Smartcar._getWindowOptions(options.windowOptions || {});\n\n        var href = this.getAuthUrl(options);\n        window.open(href, 'Connect your car', windowOptions);\n      }\n      /**\n       * Adds an on-click event listener to the element with the provided id.\n       *\n       * On-click event calls openDialog when the specified element is clicked.\n       *\n       * @param {Object} options - clickHandler configuration object\n       * @param {String} [options.id] - id of the element to add click handler to\n       * @param {String} [options.selector] - css selector of the element(s) to add click handler to\n       * @param {String} [options.state] - arbitrary state passed to redirect uri\n       * @param {Boolean} [options.forcePrompt=false] - force permission approval\n       * screen to show on every authentication, even if the user has previously\n       * consented to the exact scope of permission\n       * @param {String} [options.vehicleInfo.make] - `vehicleInfo` is an\n       * object with an optional property `make`, which allows users to bypass the\n       * car brand selection screen. For a complete list of supported makes, please\n       * see our [API Reference](https://smartcar.com/docs/api#authorization)\n       * documentation.\n       * @param {Boolean|Object} [options.singleSelect] - An optional value that sets the\n       * behavior of the grant dialog displayed to the user. If set to `true`,\n       * `single_select` limits the user to selecting only one vehicle. If `single_select`\n       * is passed in as an object with the property `vin`, Smartcar will only authorize\n       * the vehicle with the specified VIN. See the\n       * [API reference](https://smartcar.com/docs/api/#connect-match)\n       * for more information.\n       */\n\n    }, {\n      key: 'addClickHandler',\n      value: function addClickHandler(options) {\n        var _this2 = this;\n\n        var id = options.id,\n            selector = options.selector; // check if id or selector option exists\n\n        if (!id && !selector) {\n          throw new Error('Could not add click handler: id or selector must be provided.');\n        } // find all the DOM elements that match the id and selector\n\n\n        var elements = [];\n\n        if (id) {\n          var element = document.getElementById(id);\n\n          if (element) {\n            elements.push(element);\n          }\n        }\n\n        if (selector) {\n          elements.push.apply(elements, _toConsumableArray(document.querySelectorAll(selector)));\n        }\n\n        if (!elements.length) {\n          throw new Error('\\n        Could not add click handler: element with \\'' + (id || selector) + '\\' was not found.\\n      ');\n        } // _elementToClickHandler stores all the element - clickHandler pairs under the same instance\n        // because it is possible to call addClickHandler multiple times with different options\n\n\n        if (!this._elementToClickHandler) {\n          this._elementToClickHandler = new Map();\n        }\n\n        var clickHandler = function clickHandler() {\n          _this2.openDialog(options); // this is equivalent to calling:\n          // event.preventDefault();\n          // event.stopPropogation();\n\n\n          return false;\n        };\n\n        elements.forEach(function (element) {\n          // register element - clickHandler pair\n          _this2._elementToClickHandler.set(element, clickHandler); // register eventListener\n\n\n          element.addEventListener('click', clickHandler);\n        });\n      }\n      /**\n       * Remove Smartcar's event listeners.\n       *\n       * 1. remove listener on the global window object:\n       * The Smartcar SDK uses a global 'message' event listener to recieve the\n       * authorization code from the pop-up dialog. Call this method to remove the\n       * event listener from the global window.\n       *\n       * 2. remove click event listeners on DOM elements\n       * The Smartcar SDK also provides an `addClickHandler` method to attach click\n       * events to DOM elements. These event listeners will also be removed by calling\n       * this `unmount` method.\n       */\n\n    }, {\n      key: 'unmount',\n      value: function unmount() {\n        window.removeEventListener('message', this.messageHandler);\n\n        if (this._elementToClickHandler) {\n          var _iteratorNormalCompletion3 = true;\n          var _didIteratorError3 = false;\n          var _iteratorError3 = undefined;\n\n          try {\n            for (var _iterator3 = this._elementToClickHandler.entries()[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n              var _ref = _step3.value;\n\n              var _ref2 = _slicedToArray(_ref, 2);\n\n              var element = _ref2[0];\n              var clickHandler = _ref2[1];\n              element.removeEventListener('click', clickHandler);\n            }\n          } catch (err) {\n            _didIteratorError3 = true;\n            _iteratorError3 = err;\n          } finally {\n            try {\n              if (!_iteratorNormalCompletion3 && _iterator3.return) {\n                _iterator3.return();\n              }\n            } finally {\n              if (_didIteratorError3) {\n                throw _iteratorError3;\n              }\n            }\n          }\n        }\n      }\n    }], [{\n      key: '_validateConstructorOptions',\n      value: function _validateConstructorOptions(options) {\n        if (!options.clientId) {\n          throw new TypeError('A client ID option must be provided');\n        }\n\n        if (!options.redirectUri) {\n          throw new TypeError('A redirect URI option must be provided');\n        }\n\n        if (options.redirectUri.startsWith('https://javascript-sdk.smartcar.com')) {\n          // require onComplete method with at least two parameters (error & code)\n          // when hosting on Smartcar CDN\n          if (!options.onComplete || options.onComplete.length < 2) {\n            throw new Error(\"When using Smartcar's CDN redirect an onComplete function with at\" + ' least 2 parameters (error & code) is required to handle' + ' completion of Connect');\n          }\n\n          var usesOldUriScheme = /redirect-[0-9]+\\.[0-9]+\\.[0-9]+\\?/.test(options.redirectUri);\n\n          if (usesOldUriScheme) {\n            // eslint-disable-next-line no-console\n            console.warn(\"\\nThe Smartcar redirect URI you're using is outdated! To update it, please see:\\nhttps://smartcar.com/docs/guides/new-redirect-uri\\n\");\n          }\n        }\n      }\n      /**\n       * Calculate popup window size and position based on current window settings.\n       *\n       * @param {Object} options - the postion and dimention setting of the popup window\n       * @param {String|Number} [options.top] - the top property of\n       * [window features](https://developer.mozilla.org/en-US/docs/Web/API/Window/open#Window_features)\n       * @param {String|Number} [options.left] - the left property of\n       * [window features](https://developer.mozilla.org/en-US/docs/Web/API/Window/open#Window_features)\n       * @param {String|Number} [options.width] - the width property of\n       * [window features](https://developer.mozilla.org/en-US/docs/Web/API/Window/open#Window_features)\n       * the minimum required value is 100.\n       * @param {String|Number} [options.height] - the height property of\n       * [window features](https://developer.mozilla.org/en-US/docs/Web/API/Window/open#Window_features)\n       * the minimum required value is 100.\n       * @private\n       * @return {String} a string of window settings\n       */\n\n    }, {\n      key: '_getWindowOptions',\n      value: function _getWindowOptions(windowOptions) {\n        Object.keys(windowOptions).forEach(function (option) {\n          var numValue = parseFloat(windowOptions[option]);\n\n          if (isNaN(numValue)) {\n            windowOptions[option] = '';\n          } else if (numValue < 100 && (option === 'width' || option === 'height')) {\n            windowOptions[option] = '100';\n          } else {\n            windowOptions[option] = String(numValue);\n          }\n        }); // Sets default popup window size as percentage of screen size\n        // Note that this only applies to desktop browsers\n\n        var windowSettings = {\n          width: window.screen.width * 0.3,\n          height: window.screen.height * 0.75\n        };\n        var widthOffset = (window.outerWidth - windowSettings.width) / 2;\n        var heightOffset = (window.outerHeight - windowSettings.height) / 8;\n        var options = '';\n        options += 'top=' + (windowOptions.top || window.screenY + heightOffset) + ',';\n        options += 'left=' + (windowOptions.left || window.screenX + widthOffset) + ',';\n        options += 'width=' + (windowOptions.width || windowSettings.width) + ',';\n        options += 'height=' + (windowOptions.height || windowSettings.height) + ',';\n        return options;\n      }\n    }]);\n\n    return Smartcar;\n  }();\n  /**\n   * Access denied error returned by Connect.\n   *\n   * @extends Error\n   */\n\n\n  Smartcar.AccessDenied = function (_Error) {\n    _inherits(_class, _Error);\n    /**\n     * @param {String} message - detailed error description\n     */\n\n\n    function _class(message) {\n      _classCallCheck(this, _class);\n\n      var _this3 = _possibleConstructorReturn(this, (_class.__proto__ || Object.getPrototypeOf(_class)).call(this, message));\n\n      _this3.name = 'AccessDenied';\n      return _this3;\n    }\n\n    return _class;\n  }(Error);\n  /**\n   * Vehicle incompatible error returned by Connect. Will optionally\n   * have a vehicleInfo object if the user chooses to give permissions to provide\n   * that information. See our [Connect documentation](https://smartcar.com/docs/api#smartcar-connect)\n   * for more details.\n   *\n   * @extends Error\n   */\n\n\n  Smartcar.VehicleIncompatible = function (_Error2) {\n    _inherits(_class2, _Error2);\n    /**\n     * @param {String} message - detailed error description\n     * @param {?Object} vehicleInfo - If a vehicle is incompatible, the user has\n     * the option to return vehicleInfo to the application.\n     * @param {String} vehicleInfo.vin - returned if user gives permission.\n     * @param {String} vehicleInfo.make - returned if user gives permission.\n     * @param {Number} vehicleInfo.year - returned if user gives permission.\n     * @param {String} [vehicleInfo.model] - optionally returned if user gives permission.\n     */\n\n\n    function _class2(message, vehicleInfo) {\n      _classCallCheck(this, _class2);\n\n      var _this4 = _possibleConstructorReturn(this, (_class2.__proto__ || Object.getPrototypeOf(_class2)).call(this, message));\n\n      _this4.name = 'VehicleIncompatible';\n      _this4.vehicleInfo = vehicleInfo;\n      return _this4;\n    }\n\n    return _class2;\n  }(Error);\n  /**\n   * Invalid subscription error returned by Connect.\n   *\n   * @extends Error\n   */\n\n\n  Smartcar.InvalidSubscription = function (_Error3) {\n    _inherits(_class3, _Error3);\n    /**\n     * @param {String} message - detailed error description\n     */\n\n\n    function _class3(message) {\n      _classCallCheck(this, _class3);\n\n      var _this5 = _possibleConstructorReturn(this, (_class3.__proto__ || Object.getPrototypeOf(_class3)).call(this, message));\n\n      _this5.name = 'InvalidSubscription';\n      return _this5;\n    }\n\n    return _class3;\n  }(Error);\n\n  return Smartcar;\n});","map":null,"metadata":{},"sourceType":"script"}