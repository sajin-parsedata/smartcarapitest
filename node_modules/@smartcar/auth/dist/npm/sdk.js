var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

;(function (root, factory) {
  /* istanbul ignore next */
  if (typeof define === 'function' && define.amd) {
    define([], factory);
  } else if ((typeof exports === 'undefined' ? 'undefined' : _typeof(exports)) === 'object') {
    module.exports = factory();
  } else {
    root.Smartcar = factory();
  }
})(this, function () {
  'use strict';

  /* eslint-env node */

  var Smartcar = function () {
    /**
     * @callback OnComplete
     * @param {?Error} error - something went wrong in Connect; this
     * normally indicates that the user denied access to your application or does not
     * have a connected vehicle
     * @param {String} code - the authorization code to be exchanged from a
     * backend sever for an access token
     * @param {Object} [state] - contains state if it was set on the initial
     * authorization request
     */

    /**
     * Initializes Smartcar class.
     *
     * @constructor
     * @param {Object} options - the SDK configuration object
     * @param {String} options.clientId - the application's client id
     * @param {String} options.redirectUri - the registered redirect uri of the
     * application
     * @param {String[]} [options.scope] - requested permission scopes
     * @param {OnComplete} [options.onComplete] - called on completion of Smartcar Connect
     * @param {Boolean} [options.testMode=false] - launch Smartcar Connect in test mode
     */
    function Smartcar(options) {
      var _this = this;

      _classCallCheck(this, Smartcar);

      // polyfill String.prototype.startsWith for IE11 support
      // istanbul ignore next
      if (!String.prototype.startsWith) {
        // eslint-disable-next-line no-extend-native
        String.prototype.startsWith = function (searchString, position) {
          position = position || 0;
          return this.substr(position, searchString.length) === searchString;
        };
      }

      // ensure options are well formed
      Smartcar._validateConstructorOptions(options);

      this.clientId = options.clientId;
      this.redirectUri = options.redirectUri;
      this.scope = options.scope;
      this.onComplete = options.onComplete;
      this.mode = options.testMode === true ? 'test' : 'live';
      this.responseType = 'code';
      // identifier for matching message event and multiple Smartcar instances
      // it is a string composed of a timestamp and a 8-digit random number
      this.instanceId = new Date().getTime() + String(Math.random()).slice(2, 10);

      // handler
      this.messageHandler = function (event) {
        // bail if message from unexpected source
        if (!_this.redirectUri.startsWith(event.origin)) {
          return;
        }

        var message = event.data || {};
        // bail if `message.name` is not `SmartcarAuthMessage`
        // this prevents attempting to handle messages intended for others
        if (message.name !== 'SmartcarAuthMessage') {
          return;
        }

        // bail if `state` is invalid
        var stateObject = void 0;
        try {
          stateObject = JSON.parse(window.atob(message.state));
        } catch (e) {
          return;
        }

        var _stateObject = stateObject,
            originalState = _stateObject.originalState,
            instanceId = _stateObject.instanceId;
        // bail if `instanceId` doesn't match

        if (instanceId !== _this.instanceId) {
          return;
        }

        // if onComplete not specified do nothing, assume developer is conveying
        // completion information from backend server receiving redirect to front
        // end (not using onComplete)
        if (_this.onComplete) {
          // if auth errored generate appropriate error else null
          var generateError = function generateError(error, description) {
            if (!error) {
              return null;
            }

            switch (error) {
              case 'access_denied':
                return new Smartcar.AccessDenied(description);
              case 'invalid_subscription':
                return new Smartcar.InvalidSubscription(description);
              case 'vehicle_incompatible':
                var params = event.data;

                // This field will always exist if vehicleInfo is returned
                if (!params.vin) {
                  return new Smartcar.VehicleIncompatible(description, null);
                }

                // These fields are required when vehicleInfo is returned
                var vehicleInfo = {
                  vin: params.vin,
                  make: params.make,
                  year: Number(params.year)
                };

                // This field is optional
                if (params.model) {
                  vehicleInfo.model = params.model;
                }

                return new Smartcar.VehicleIncompatible(description, vehicleInfo);
              default:
                return new Error('Unexpected error: ' + error + ' - ' + description);
            }
          };

          var err = generateError(message.error, message.errorDescription);

          /**
           * Call `onComplete` with parameters even if developer is not using
           * a Smartcar-hosted redirect. Regardless of if they are using a
           * Smartcar-hosted redirect they may still want `onComplete` to do
           * something with message.
           *
           * If empty onComplete is passed, parameters will be harmlessly ignored.
           *
           * If a developer chooses to pass an `onComplete` expecting these
           * parameters they must also handle populating the corresponding query
           * parameters in their redirect uri.
           */
          _this.onComplete(err, message.code, originalState);
        }
      };

      // add handler for postMessage event on completion of Smartcar Connect
      window.addEventListener('message', this.messageHandler);
    }

    /**
     * Validate options passed to Smartcar constructor.
     *
     * See constructor documentation for enumeration of options properties.
     *
     * @private
     * @param {Object} options - the SDK configuration object
     */


    _createClass(Smartcar, [{
      key: 'getAuthUrl',


      /**
       * Generates Smartcar OAuth URL.
       *
       * @param {Object} options - the link configuration object
       * @param {String} [options.state] - arbitrary state passed to redirect uri
       * @param {Boolean} [options.forcePrompt=false] - force permission approval
       * screen to show on every authentication, even if the user has previously
       * consented to the exact scope of permission
       * @param {String} [options.vehicleInfo.make] - `vehicleInfo` is an
       * object with an optional property `make`, which allows users to bypass the
       * car brand selection screen. For a complete list of supported brands, please
       * see our [API Reference](https://smartcar.com/docs/api#authorization)
       * documentation.
       * @param {Boolean|Object} [options.singleSelect] - An optional value that sets the
       * behavior of the grant dialog displayed to the user. If set to `true`,
       * `single_select` limits the user to selecting only one vehicle. If `single_select`
       * is passed in as an object with the property `vin`, Smartcar will only authorize
       * the vehicle with the specified VIN. See the
       * [API reference](https://smartcar.com/docs/api/#connect-match)
       * for more information.
       * @param {String[]} [options.flags] - An optional space-separated list of feature
       * flags that your application has early access to.
       *
       * @return {String} Connect URL to redirect user to.
       *
       * @example
       * https://connect.smartcar.com/oauth/authorize?
       * response_type=code
       * &client_id=8229df9f-91a0-4ff0-a1ae-a1f38ee24d07
       * &scope=read_odometer read_vehicle_info
       * &redirect_uri=https://example.com/home
       * &state=0facda3319
       * &make=TESLA
       * &single_select=true
       * &single_select_vin=5YJSA1E14FF101307
       * &flags=country:DE color:00819D
       */
      value: function getAuthUrl(options) {
        options = options || {};

        var link = '';
        link += 'https://connect.smartcar.com/oauth/authorize';
        link += '?response_type=' + this.responseType;
        link += '&client_id=' + this.clientId;
        link += '&redirect_uri=' + encodeURIComponent(this.redirectUri);

        // map forcePrompt to approvalPrompt, two options: 'force' and 'auto'
        var forcePrompt = options.forcePrompt === true;
        link += '&approval_prompt=' + (forcePrompt ? 'force' : 'auto');

        // If scope is not specified, Smartcar will default to requesting all scopes
        // from the user
        if (this.scope) {
          link += '&scope=' + encodeURIComponent(this.scope.join(' '));
        }

        link += '&mode=' + this.mode;

        if (options.singleSelect !== undefined && options.singleSelect !== null) {
          var singleSelectParamAdded = false;
          if (_typeof(options.singleSelect) === 'object') {
            var availableParams = ['vin'];
            var _iteratorNormalCompletion = true;
            var _didIteratorError = false;
            var _iteratorError = undefined;

            try {
              for (var _iterator = availableParams[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                var param = _step.value;

                if (param in options.singleSelect) {
                  link += '&single_select_' + param + '=' + options.singleSelect[param];
                  singleSelectParamAdded = true;
                }
              }
            } catch (err) {
              _didIteratorError = true;
              _iteratorError = err;
            } finally {
              try {
                if (!_iteratorNormalCompletion && _iterator.return) {
                  _iterator.return();
                }
              } finally {
                if (_didIteratorError) {
                  throw _iteratorError;
                }
              }
            }

            if (!singleSelectParamAdded) {
              link += '&single_select=false';
            } else {
              link += '&single_select=true';
            }
          } else {
            link += '&single_select=' + (options.singleSelect === true);
          }
        }

        // augment state to track the corresponding instance
        var state = {
          instanceId: this.instanceId
        };
        if (options.state) {
          state.originalState = options.state;
        }
        // convert the augmented state to a base64 string
        link += '&state=' + window.btoa(JSON.stringify(state));

        if (options.vehicleInfo) {
          var _availableParams = ['make'];
          var _iteratorNormalCompletion2 = true;
          var _didIteratorError2 = false;
          var _iteratorError2 = undefined;

          try {
            for (var _iterator2 = _availableParams[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
              var _param = _step2.value;

              if (_param in options.vehicleInfo) {
                link += '&' + _param + '=' + encodeURIComponent(options.vehicleInfo[_param]);
              }
            }
          } catch (err) {
            _didIteratorError2 = true;
            _iteratorError2 = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion2 && _iterator2.return) {
                _iterator2.return();
              }
            } finally {
              if (_didIteratorError2) {
                throw _iteratorError2;
              }
            }
          }
        }

        if (options.flags) {
          link += '&flags=' + encodeURIComponent(options.flags.join(' '));
        }

        return link;
      }

      /**
       * Launches Smartcar Connect in a new window.
       *
       * @param {Object} options - the link configuration object
       * @param {String} [options.state] - arbitrary state passed to redirect uri
       * @param {Boolean} [options.forcePrompt=false] - force permission approval
       * screen to show on every authentication, even if the user has previously
       * consented to the exact scope of permission
       * @param {String} [options.vehicleInfo.make] - `vehicleInfo` is an
       * object with an optional property `make`, which allows users to bypass the
       * car brand selection screen. For a complete list of supported makes, please
       * see our [API Reference](https://smartcar.com/docs/api#authorization)
       * documentation.
       * @param {Boolean|Object} [options.singleSelect] - An optional value that sets the
       * behavior of the grant dialog displayed to the user. If set to `true`,
       * `single_select` limits the user to selecting only one vehicle. If `single_select`
       * is passed in as an object with the property `vin`, Smartcar will only authorize
       * the vehicle with the specified VIN. See the
       * [API reference](https://smartcar.com/docs/api/#connect-match)
       * for more information.
       * @param {Object} [options.windowOptions] - the position and dimension settings
       * of the popup window
       * @param {String} [options.windowOptions.top] - the top property of
       * [window features](https://developer.mozilla.org/en-US/docs/Web/API/Window/open#Window_features)
       * @param {String} [options.windowOptions.left] - the left property of
       * [window features](https://developer.mozilla.org/en-US/docs/Web/API/Window/open#Window_features)
       * @param {String} [options.windowOptions.width] - the width property of
       * [window features](https://developer.mozilla.org/en-US/docs/Web/API/Window/open#Window_features)
       * @param {String} [options.windowOptions.height] - the height property of
       * [window features](https://developer.mozilla.org/en-US/docs/Web/API/Window/open#Window_features)
       */

    }, {
      key: 'openDialog',
      value: function openDialog(options) {
        var windowOptions = Smartcar._getWindowOptions(options.windowOptions || {});
        var href = this.getAuthUrl(options);
        window.open(href, 'Connect your car', windowOptions);
      }

      /**
       * Adds an on-click event listener to the element with the provided id.
       *
       * On-click event calls openDialog when the specified element is clicked.
       *
       * @param {Object} options - clickHandler configuration object
       * @param {String} [options.id] - id of the element to add click handler to
       * @param {String} [options.selector] - css selector of the element(s) to add click handler to
       * @param {String} [options.state] - arbitrary state passed to redirect uri
       * @param {Boolean} [options.forcePrompt=false] - force permission approval
       * screen to show on every authentication, even if the user has previously
       * consented to the exact scope of permission
       * @param {String} [options.vehicleInfo.make] - `vehicleInfo` is an
       * object with an optional property `make`, which allows users to bypass the
       * car brand selection screen. For a complete list of supported makes, please
       * see our [API Reference](https://smartcar.com/docs/api#authorization)
       * documentation.
       * @param {Boolean|Object} [options.singleSelect] - An optional value that sets the
       * behavior of the grant dialog displayed to the user. If set to `true`,
       * `single_select` limits the user to selecting only one vehicle. If `single_select`
       * is passed in as an object with the property `vin`, Smartcar will only authorize
       * the vehicle with the specified VIN. See the
       * [API reference](https://smartcar.com/docs/api/#connect-match)
       * for more information.
       */

    }, {
      key: 'addClickHandler',
      value: function addClickHandler(options) {
        var _this2 = this;

        var id = options.id,
            selector = options.selector;

        // check if id or selector option exists

        if (!id && !selector) {
          throw new Error('Could not add click handler: id or selector must be provided.');
        }

        // find all the DOM elements that match the id and selector
        var elements = [];
        if (id) {
          var element = document.getElementById(id);
          if (element) {
            elements.push(element);
          }
        }
        if (selector) {
          elements.push.apply(elements, _toConsumableArray(document.querySelectorAll(selector)));
        }
        if (!elements.length) {
          throw new Error('\n        Could not add click handler: element with \'' + (id || selector) + '\' was not found.\n      ');
        }

        // _elementToClickHandler stores all the element - clickHandler pairs under the same instance
        // because it is possible to call addClickHandler multiple times with different options
        if (!this._elementToClickHandler) {
          this._elementToClickHandler = new Map();
        }
        var clickHandler = function clickHandler() {
          _this2.openDialog(options);
          // this is equivalent to calling:
          // event.preventDefault();
          // event.stopPropogation();
          return false;
        };

        elements.forEach(function (element) {
          // register element - clickHandler pair
          _this2._elementToClickHandler.set(element, clickHandler);
          // register eventListener
          element.addEventListener('click', clickHandler);
        });
      }

      /**
       * Remove Smartcar's event listeners.
       *
       * 1. remove listener on the global window object:
       * The Smartcar SDK uses a global 'message' event listener to recieve the
       * authorization code from the pop-up dialog. Call this method to remove the
       * event listener from the global window.
       *
       * 2. remove click event listeners on DOM elements
       * The Smartcar SDK also provides an `addClickHandler` method to attach click
       * events to DOM elements. These event listeners will also be removed by calling
       * this `unmount` method.
       */

    }, {
      key: 'unmount',
      value: function unmount() {
        window.removeEventListener('message', this.messageHandler);
        if (this._elementToClickHandler) {
          var _iteratorNormalCompletion3 = true;
          var _didIteratorError3 = false;
          var _iteratorError3 = undefined;

          try {
            for (var _iterator3 = this._elementToClickHandler.entries()[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
              var _ref = _step3.value;

              var _ref2 = _slicedToArray(_ref, 2);

              var element = _ref2[0];
              var clickHandler = _ref2[1];

              element.removeEventListener('click', clickHandler);
            }
          } catch (err) {
            _didIteratorError3 = true;
            _iteratorError3 = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion3 && _iterator3.return) {
                _iterator3.return();
              }
            } finally {
              if (_didIteratorError3) {
                throw _iteratorError3;
              }
            }
          }
        }
      }
    }], [{
      key: '_validateConstructorOptions',
      value: function _validateConstructorOptions(options) {
        if (!options.clientId) {
          throw new TypeError('A client ID option must be provided');
        }

        if (!options.redirectUri) {
          throw new TypeError('A redirect URI option must be provided');
        }

        if (options.redirectUri.startsWith('https://javascript-sdk.smartcar.com')) {
          // require onComplete method with at least two parameters (error & code)
          // when hosting on Smartcar CDN
          if (!options.onComplete || options.onComplete.length < 2) {
            throw new Error("When using Smartcar's CDN redirect an onComplete function with at" + ' least 2 parameters (error & code) is required to handle' + ' completion of Connect');
          }

          var usesOldUriScheme = /redirect-[0-9]+\.[0-9]+\.[0-9]+\?/.test(options.redirectUri);

          if (usesOldUriScheme) {
            // eslint-disable-next-line no-console
            console.warn("\nThe Smartcar redirect URI you're using is outdated! To update it, please see:\nhttps://smartcar.com/docs/guides/new-redirect-uri\n");
          }
        }
      }

      /**
       * Calculate popup window size and position based on current window settings.
       *
       * @param {Object} options - the postion and dimention setting of the popup window
       * @param {String|Number} [options.top] - the top property of
       * [window features](https://developer.mozilla.org/en-US/docs/Web/API/Window/open#Window_features)
       * @param {String|Number} [options.left] - the left property of
       * [window features](https://developer.mozilla.org/en-US/docs/Web/API/Window/open#Window_features)
       * @param {String|Number} [options.width] - the width property of
       * [window features](https://developer.mozilla.org/en-US/docs/Web/API/Window/open#Window_features)
       * the minimum required value is 100.
       * @param {String|Number} [options.height] - the height property of
       * [window features](https://developer.mozilla.org/en-US/docs/Web/API/Window/open#Window_features)
       * the minimum required value is 100.
       * @private
       * @return {String} a string of window settings
       */

    }, {
      key: '_getWindowOptions',
      value: function _getWindowOptions(windowOptions) {
        Object.keys(windowOptions).forEach(function (option) {
          var numValue = parseFloat(windowOptions[option]);
          if (isNaN(numValue)) {
            windowOptions[option] = '';
          } else if (numValue < 100 && (option === 'width' || option === 'height')) {
            windowOptions[option] = '100';
          } else {
            windowOptions[option] = String(numValue);
          }
        });

        // Sets default popup window size as percentage of screen size
        // Note that this only applies to desktop browsers
        var windowSettings = {
          width: window.screen.width * 0.3,
          height: window.screen.height * 0.75
        };

        var widthOffset = (window.outerWidth - windowSettings.width) / 2;
        var heightOffset = (window.outerHeight - windowSettings.height) / 8;

        var options = '';
        options += 'top=' + (windowOptions.top || window.screenY + heightOffset) + ',';
        options += 'left=' + (windowOptions.left || window.screenX + widthOffset) + ',';
        options += 'width=' + (windowOptions.width || windowSettings.width) + ',';
        options += 'height=' + (windowOptions.height || windowSettings.height) + ',';

        return options;
      }
    }]);

    return Smartcar;
  }();

  /**
   * Access denied error returned by Connect.
   *
   * @extends Error
   */


  Smartcar.AccessDenied = function (_Error) {
    _inherits(_class, _Error);

    /**
     * @param {String} message - detailed error description
     */
    function _class(message) {
      _classCallCheck(this, _class);

      var _this3 = _possibleConstructorReturn(this, (_class.__proto__ || Object.getPrototypeOf(_class)).call(this, message));

      _this3.name = 'AccessDenied';
      return _this3;
    }

    return _class;
  }(Error);

  /**
   * Vehicle incompatible error returned by Connect. Will optionally
   * have a vehicleInfo object if the user chooses to give permissions to provide
   * that information. See our [Connect documentation](https://smartcar.com/docs/api#smartcar-connect)
   * for more details.
   *
   * @extends Error
   */
  Smartcar.VehicleIncompatible = function (_Error2) {
    _inherits(_class2, _Error2);

    /**
     * @param {String} message - detailed error description
     * @param {?Object} vehicleInfo - If a vehicle is incompatible, the user has
     * the option to return vehicleInfo to the application.
     * @param {String} vehicleInfo.vin - returned if user gives permission.
     * @param {String} vehicleInfo.make - returned if user gives permission.
     * @param {Number} vehicleInfo.year - returned if user gives permission.
     * @param {String} [vehicleInfo.model] - optionally returned if user gives permission.
     */
    function _class2(message, vehicleInfo) {
      _classCallCheck(this, _class2);

      var _this4 = _possibleConstructorReturn(this, (_class2.__proto__ || Object.getPrototypeOf(_class2)).call(this, message));

      _this4.name = 'VehicleIncompatible';
      _this4.vehicleInfo = vehicleInfo;
      return _this4;
    }

    return _class2;
  }(Error);

  /**
   * Invalid subscription error returned by Connect.
   *
   * @extends Error
   */
  Smartcar.InvalidSubscription = function (_Error3) {
    _inherits(_class3, _Error3);

    /**
     * @param {String} message - detailed error description
     */
    function _class3(message) {
      _classCallCheck(this, _class3);

      var _this5 = _possibleConstructorReturn(this, (_class3.__proto__ || Object.getPrototypeOf(_class3)).call(this, message));

      _this5.name = 'InvalidSubscription';
      return _this5;
    }

    return _class3;
  }(Error);

  return Smartcar;
});